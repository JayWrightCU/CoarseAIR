%% The Function reads the Rates from the Rate Coefficients Files generated by CoarseAIR
%
%  Input Global Var: - Temp.TNowChar
%                    - Syst.HDF5_File
%
function Read_Rates()    

    %%==============================================================================================================
    % 
    % Coarse-Grained method for Quasi-Classical Trajectories (CG-QCT) 
    % 
    % Copyright (C) 2018 Simone Venturi and Bruno Lopez (University of Illinois at Urbana-Champaign). 
    %
    % Based on "VVTC" (Vectorized Variable stepsize Trajectory Code) by David Schwenke (NASA Ames Research Center). 
    % 
    % This program is free software; you can redistribute it and/or modify it under the terms of the 
    % Version 2.1 GNU Lesser General Public License as published by the Free Software Foundation. 
    % 
    % This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
    % without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
    % See the GNU Lesser General Public License for more details. 
    % 
    % You should have received a copy of the GNU Lesser General Public License along with this library; 
    % if not, write to the Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA 
    % 
    %---------------------------------------------------------------------------------------------------------------
    %%==============================================================================================================
    
    global Input Rates Syst Temp
  
    
    fprintf('= Read_Rates =========================== T = %i K\n', Temp.TNow)
    fprintf('====================================================\n')
    fprintf('Reading Rates \n\n' )
    
    
    if (Syst.NAtoms == 3)
        
        iMol    = Syst.Pair(1).ToMol;
        iNBins  = Syst.Molecule(iMol).EqNStatesIn;
    
        Rates.T(Temp.iT).Diss                 = zeros(iNBins, 4);
        Rates.T(Temp.iT).Inel                 = zeros(iNBins, iNBins);
        for iExch = 1:size(Syst.ExchToMol,1)
            kMol    = Syst.ExchToMol(iExch,1);
            kNBins  = Syst.Molecule(kMol).EqNStatesIn;
            Rates.T(Temp.iT).ExchType(iExch).Exch = zeros(iNBins, kNBins);
        end
        
    else

        iMol    = Syst.Pair(1).ToMol;
        jMol    = Syst.Pair(6).ToMol;
        iNBins  = Syst.Molecule(iMol).EqNStatesIn;
        jNBins  = Syst.Molecule(jMol).EqNStatesIn;    

        Rates.T(Temp.iT).Diss                 = zeros(iNBins, jNBins, 4);
        Rates.T(Temp.iT).DissInel             = zeros(iNBins, jNBins, iNBins, Syst.NMolecules+6);
        Rates.T(Temp.iT).Inel                 = zeros(iNBins, jNBins, iNBins, jNBins);
        for iExch = 1:size(Syst.ExchToMol,1)
            kMol    = Syst.ExchToMol(iExch,1);
            lMol    = Syst.ExchToMol(iExch,2);
            kNBins  = Syst.Molecule(kMol).EqNStatesIn;
            lNBins  = Syst.Molecule(lMol).EqNStatesIn; 
            Rates.T(Temp.iT).ExchType(iExch).Exch = zeros(iNBins, jNBins, kNBins, lNBins);
        end
        
    end

    
    if strcmp(Input.Kin.RateSource, 'HDF5')
        
        Read_Rates_FromHDF5();
    
    elseif strcmp(Input.Kin.RateSource, 'PLATO')
        
        Read_Rates_FromPLATO();
        
    elseif strcmp(Input.Kin.RateSource, 'CoarseAIR')
        
        Read_Rates_FromCoarseAIR() 
        
    elseif strcmp(Input.Kin.RateSource, 'CG-QCT')
        
        Read_Rates_FromCoarseAIR() 
   
    end
    
    
    if (Input.Kin.DissCorrFactor ~= 1)
        fprintf(['Correcting Dissociation Rate by a Factor: ' num2str(Input.Kin.DissCorrFactor) '\n'] )
        Rates.T(Temp.iT).Diss = Rates.T(Temp.iT).Diss .* Input.Kin.DissCorrFactor;
    end
    
    
    
%     TempBins = Input.Kin.NGroupsOut(1); 
%     opts = delimitedTextImportOptions("NumVariables", 7);
%     opts.DataLines = [1, Inf];
%     opts.Delimiter = ["(", ")", ",", ":"];
%     opts.VariableNames = ["Var1", "VarName2", "Var3", "E12", "Var5", "Var6", "Var7"];
%     opts.SelectedVariableNames = ["VarName2", "E12"];
%     opts.VariableTypes = ["string", "double", "string", "double", "string", "string", "string"];
%     opts = setvaropts(opts, [1, 3, 5, 6, 7], "WhitespaceRule", "preserve");
%     opts = setvaropts(opts, [1, 3, 5, 6, 7], "EmptyFieldRule", "auto");
%     opts.ExtraColumnsRule = "ignore";
%     opts.EmptyLineRule = "read";
%     if Input.Kin.Proc.DissFlg == 2 || Input.Kin.Proc.DissFlg == 6
%         tbl = readtable(strcat("/home/venturi/WORKSPACE/O3Diss_Database/Run_0D/database/kinetics/O3_UMN/T",Temp.TNowChar,"K/Diss_Corrected.dat"), opts);
%     elseif Input.Kin.Proc.DissFlg == 3
%         tbl = readtable(strcat("/home/venturi/WORKSPACE/O3Diss_Database/Run_0D/database/kinetics/O3_UMN/T",Temp.TNowChar,"K/Diss_VS.dat"), opts);
%     elseif Input.Kin.Proc.DissFlg == 4
%         tbl = readtable(strcat("/home/venturi/WORKSPACE/O3Diss_Database/Run_0D/database/kinetics/O3_UMN/T",Temp.TNowChar,"K/Diss_Phys_",num2str(TempBins),"Bins.dat"), opts);
%     elseif Input.Kin.Proc.DissFlg == 5
%         tbl = readtable(strcat("/home/venturi/WORKSPACE/O3Diss_Database/Run_0D/database/kinetics/O3_UMN/T",Temp.TNowChar,"K/Diss_Phys_Fitted_",num2str(TempBins),"Bins.dat"), opts);
%     end 
%     Idx      = tbl.VarName2;
%     DissTemp = tbl.E12;
%     clear opts tbl
%     Rates.T(Temp.iT).Diss(Idx(:),1) = DissTemp(:);
    

    
%     fprintf(strcat('Computing Backward Rates \n') )
%     
%     Rates.T(Temp.iT).Recomb(:,1) = Compute_BckwdRates(Rates.T(Temp.iT).Diss(:,1), 1, Syst.Molecule(1).LevelEeV, Syst.Molecule(1).Levelq, 0.0, 0.0);
%     
%     iMol      = 1;
%     for iExch = size(Syst.ExchToMol,1)%1:size(Syst.ExchToMol,1)
%         jMol      = Syst.ExchToMol;
%         TempRates = Compute_BckwdRates(Rates.T(Temp.iT).ExchType(iExch).Exch, 2+iExch, Syst.Molecule(iMol).LevelEeV, Syst.Molecule(iMol).Levelq, Syst.Molecule(jMol).LevelEeV, Syst.Molecule(jMol).Levelq);
%         Rates.T(Temp.iT).ExchType(iExch).Exch = TempRates;
%         clear TempRates;
%     end
    


    fprintf(strcat('Computing Overall Rates \n') )
    if (Syst.NAtoms == 3)

        Rates.T(Temp.iT).Overall(:,1)           =      Rates.T(Temp.iT).Diss(:,1);
        Rates.T(Temp.iT).Overall(:,2)           = sum( Rates.T(Temp.iT).Inel(:,1),           2);
        for iExch = 1:size(Syst.ExchToMol,1)
            Rates.T(Temp.iT).Overall(:,2+iExch) = sum( Rates.T(Temp.iT).ExchType(iExch).Exch, 2);
        end

    else
        
    end
        
        
    fprintf('====================================================\n\n')  
    
end