%% The Function reads the Rates from the Rate Coefficients Files generated by CoarseAIR
%
%  Input Global Var: - Temp.TNowChar
%                    - Syst.HDF5_File
%
function Read_Rates_FromCoarseAIR()    

    %%==============================================================================================================
    % 
    % Coarse-Grained method for Quasi-Classical Trajectories (CG-QCT) 
    % 
    % Copyright (C) 2018 Simone Venturi and Bruno Lopez (University of Illinois at Urbana-Champaign). 
    %
    % Based on "VVTC" (Vectorized Variable stepsize Trajectory Code) by David Schwenke (NASA Ames Research Center). 
    % 
    % This program is free software; you can redistribute it and/or modify it under the terms of the 
    % Version 2.1 GNU Lesser General Public License as published by the Free Software Foundation. 
    % 
    % This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
    % without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
    % See the GNU Lesser General Public License for more details. 
    % 
    % You should have received a copy of the GNU Lesser General Public License along with this library; 
    % if not, write to the Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA 
    % 
    %---------------------------------------------------------------------------------------------------------------
    %%==============================================================================================================
    
    global Input Rates Syst Temp Param  
    
    
    if (Syst.NAtoms == 3)
        
        iMol    = Syst.Pair(1).ToMol;
        iNBins  = Syst.Molecule(iMol).EqNStatesIn;
    
        
        
        
    else
        RatesFldr = strcat(Input.Paths.ToQCTFldr, '/', Syst.Name, '/Rates/T_', Temp.TNowChar, '_', Temp.TNowChar, '/Rates');

        if

            NMol    = Syst.NMolecules;
            iMol    = Syst.Pair(1).ToMol;
            jMol    = Syst.Pair(6).ToMol;
            iNBins  = Syst.Molecule(iMol).EqNStatesIn;
            jNBins  = Syst.Molecule(iMol).EqNStatesIn;    

            iProc = 1
            for iBin = 1:iNBins
                for jBin = 1:jNBins
                    if (jBin >= iBin)
                        fprintf('i = %i; j = %i\n', iBin, jBin)

                        opts = delimitedTextImportOptions("NumVariables", 3);
                        opts.DataLines = [6, Inf];
                        opts.Delimiter = ",";
                        opts.VariableNames = ["jProc", "RateTemp", "Var3"];
                        opts.SelectedVariableNames = ["jProc", "RateTemp"];
                        opts.VariableTypes = ["double", "double", "string"];
                        opts.ExtraColumnsRule = "ignore";
                        opts.EmptyLineRule = "read";
                        opts = setvaropts(opts, "Var3", "WhitespaceRule", "preserve");
                        opts = setvaropts(opts, "Var3", "EmptyFieldRule", "auto");
                        tbl = readtable(strcat(Input.Paths.ToQCTFldr, '/', Syst.Name, '/Rates/T_', Temp.TNowChar, '_', Temp.TNowChar, '/Proc', num2str(iProc), '.csv'), opts);
                        jProc    = tbl.jProc;
                        RateTemp = tbl.RateTemp;
                        clear opts tbl
                        RatesVec = zeros(Syst.NTotProc,1);
                        if jProc(1) > 0
                            for ii=1:length(jProc)
                                RatesVec(jProc(ii)) = RateTemp(ii);
                            end
                        else
                            fprintf('  First Process Disregarded\n')
                        end    
                        clear jProc RateTemp
                        pp = 0;
                        for iP = 1:3
                            jP     = Param.iPOpp(iP);
                            iMol   = Syst.Pair(iP).ToMol;
                            jMol   = Syst.Pair(jP).ToMol;
                            lNBins = Syst.Molecule(iMol).EqNStatesIn;
                            kNBins = Syst.Molecule(jMol).EqNStatesIn;

                            for kBin = 1:kNBins+1
                                for lBin = 1:lNBins+1
                                    pp       = pp + 1;
                                    TempRate = RatesVec(pp);
                                    if (TempRate > 0.0)
                                        if (kBin==1) && (lBin==1)
                                            Rates.T(Temp.iT).Diss(iBin,jBin,1)                  = Rates.T(Temp.iT).Diss(iBin,jBin,1)                  + RatesVec(pp); 
                                            Rates.T(Temp.iT).Diss(iBin,jBin,iP)                 = Rates.T(Temp.iT).Diss(iBin,jBin,iP)                 + RatesVec(pp); 
                                        elseif (kBin==1)
                                            Rates.T(Temp.iT).DissInel(iBin,jBin,lBin-1,1)       = Rates.T(Temp.iT).DissInel(iBin,jBin,lBin-1,1)       + RatesVec(pp);
                                            Rates.T(Temp.iT).DissInel(iBin,jBin,lBin-1,NMol+iP) = Rates.T(Temp.iT).DissInel(iBin,jBin,lBin-1,NMol+iP) + RatesVec(pp);
                                        elseif (lBin==1)
                                            Rates.T(Temp.iT).DissInel(iBin,jBin,kBin-1,1)       = Rates.T(Temp.iT).DissInel(iBin,jBin,kBin-1,1)       + RatesVec(pp);
                                            Rates.T(Temp.iT).DissInel(iBin,jBin,kBin-1,NMol+jP) = Rates.T(Temp.iT).DissInel(iBin,jBin,kBin-1,NMol+jP) + RatesVec(pp);
                                        else
                                            if (iP==1)
                                                Rates.T(Temp.iT).Inel(iBin,jBin,kBin-1,lBin-1) = Rates.T(Temp.iT).Inel(iBin,jBin,kBin-1,lBin-1)       + RatesVec(pp); 
                                            else
                                                Rates.T(Temp.iT).Exch(iBin,jBin,kBin-1,lBin-1) = Rates.T(Temp.iT).Exch(iBin,jBin,kBin-1,lBin-1)       + RatesVec(pp);
                                            end
                                        end
                                    end
                                end
                            end
                        end

                    end
                    iProc=iProc+1;
                end
            end    

        end

        Diss      = Rates.T(Temp.iT).Diss;
        DissInel  = Rates.T(Temp.iT).DissInel;
        Inel      = Rates.T(Temp.iT).Inel;
        Exch      = Rates.T(Temp.iT).Exch;

        save(RatesFldr,'Diss', 'DissInel', 'Inel','Exch','-v7.3');
    
    en
        
        
    
end