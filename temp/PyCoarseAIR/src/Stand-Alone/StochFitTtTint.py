import pymc3 as pm
import numpy as np
import matplotlib.pyplot as plt
import sys
import pandas
from scipy.stats import kde

"""

    Checking the Uncertainty generated by 2D Arrhenius Fitting

    Program Arguments:
        - 

    Example of Program Call:
        python3 StochFitTtTint.py 

"""

PathToPostVar = #<- Path to the folder where to write the parameters' posterior dist.s


NCores      = 2
PlotShowFlg = True


### Reading Input 
TintVec = #<- Here I would read the Internal Temperatures
TintVec = np.asarray(TintVec, dtype=np.float64)

TtVec   = #<- Here I would read the Translational Temperatures
TtVec   = np.asarray(TtVec, dtype=np.float64)
print("Temperature Data Vector = ", TtVec)


### Reading Output 
KfPoints    = #<- Here I would read the Forward Rates
KfPoints    = np.asarray(KfPoints,   dtype=np.float64)
KfPointsLog = np.log(KfPoints)



StochArr2D = pm.Model()
with StochArr2D:

    ############################################################################
    ## I Level
    aArr = pm.Uniform('aArr',  -80.0, 0.0, testval=-20.0)
    bArr = pm.Uniform('bArr',    0.0, 2.0, testval=0.5)
    cArr = pm.Uniform('cArr',   0.0 ,20.0, testval=10.0) 

    logK_Tint = pm.Deterministic('logK_Tint', a + b*np.log(TintVec) - np.exp(c)/TintVec)
    logK_Tt   = pm.Deterministic('logK_Tt',   a + b*np.log(TtVec)   - np.exp(c)/TtVec)


    ############################################################################
    ## II Level
    b1 = pm.Uniform('b1', -1.e3, 1.e3, testval=0.0)
    b2 = pm.Uniform('b2', -1.e3, 1.e3, testval=0.0)
    i1 = pm.Uniform('i1', -1.e3, 1.e3, testval=0.0)
    i2 = pm.Uniform('i2', -1.e3, 1.e3, testval=0.0)
    t1 = pm.Uniform('t1', -1.e3, 1.e3, testval=0.0)
    t2 = pm.Uniform('t2', -1.e3, 1.e3, testval=0.0)

    logKf  = pm.Deterministic('logKf', b1 + (i1 * logK_Tint) + (i2 * logK_Tint**2) + (t1 * logK_Tt) + (t2 * logK_Tt**2) + b2 * (logK_Tint * logK_Tt) )


    ############################################################################
    ## 
    Sigma  = pm.Lognormal('Sigma', mu=0.01,  sd=3.0,   testval=1.e-1)
    yLike  = pm.Normal('yLike',    mu=logKf, sd=Sigma, observed=KfPointsLog)
    
    VarVec = ['aArr', 'bArr', 'cArr', 'Sigma', 'b1', 'b2', 'i1', 'i2', 't1', 't2']



with StochArr2D:
    #map_estimate = pm.sample(5000, model=StochArr, tune=5000, cores=8)
    #map_estimate = pm.find_MAP(model=StochArr)
    trace = pm.sample(2000000, step=pm.Metropolis(), tune=10000, cores=NCores)
    #trace = pm.sample(5000, step=pm.NUTS(), tune=1000, cores=NCores)



with StochArr2D:
    pm.traceplot(trace, varnames=VarVec);
    #pm.traceplot(trace, figsize=(12, len(trace.varnames)*1.5), lines={k: v for v in a})    
    #pm.summary(trace).round(2)
    plt.show()



with StochArr2D:

    n                = T.iscalar('n')
    n.tag.test_value = 100
    NParamsStats     = 3000#NNInput.NParPostSamples
    for var in VarVec:
        #
        varMean = trace[var].mean()
        varStd  = trace[var].std()
        varMean = numpy.atleast_1d(varMean)
        varStd  = numpy.atleast_1d(varStd)
        #
        print('    Parameter: ', var, ';\n      Mean = ', varMean, ';\n      Std. Dev. = ', varStd,'\n\n')
        #
        PathToPostVar = PathToPost + '/' + str(var) + '_Post.csv'
        numpy.savetxt(PathToPostVar, varMean, delimiter=",")
        numpy.savetxt(PathToPostVar, varStd,  delimiter=",")
        #
    print(('    Wrote Posterior Means and Std.Devs in Folder: ' + PathToPostVar + '\n'))
